HyPar - Hyperbolic-Parabolic Partial Differential Equations Solver
        (with PETSc time-integration)

A finite-difference algorithm to solve hyperbolic-parabolic equations 
of the following form:

    du        d [f_i(u)]         d^2 [g_i(u)]
   ----   +  ------------   =  ---------------- + S(u)  ;   0 < i <= ndims
    dt           dx_i             d (x_i)^2                 (implied summation)

where
  u     -> state vector of size nvar
  f     -> hyperbolic flux function
  g     -> parabolic  function
  S     -> source term
  ndims -> number of space dimensions
  (^ denotes superscript and _ denotes subscript)

The domain, x1_i < x_i < x2_i (where x1_i and x2_i are the upper and 
lower bounds of x_i) is discretized with a Cartesian grid.

- Spatial Discretization of Hyperbolic Terms - Conservative:
  + First order upwind
  + Third order MUSCL with Koren's limiter (coming soon)
  + Fifth order WENO 
  + Fifth order CRWENO (coming soon)
- Spatial Discretization of Parabolic Terms - Conservative and Non-Conservative
  + Second order central
  + Fourth order central (coming soon)
  + Fourth order compact (coming soon)
  + Sixth order compact (coming soon)
  + Sixth order WENO (coming soon)
- Time integration
  + With PETSc (http://www.mcs.anl.gov/petsc/)
  + Without PETSc
    - Forward Euler
    - Multi-stage explicit Runge Kutta scheme
      (First, second, third, fourth order schemes)
- Physics models
  + Linear advection-diffusion-reaction
  + Fokker-Planck double well
  + Fokker-Planck model for Power Systems
  + Euler equations (1D, 2D, 3D) (Coming soon)
  + Porous Medium Equations (Coming soon)
- Output options
  + Plain text
  + Tecplot (2D and 3D problems only)
- Serial as well as parallel (MPI)

The solver provides a standardized template for discretization schemes and 
physical models. New physical models can be easily incorporated by defining 
the following functions for them:-
- Hyperbolic function  
- Parabolic function   
- Source function      
- Upwinding function if hyperbolic function present
- CFL and Diffusion number computation functions
Existing physical models provide a template.
Similarly, new discretization schemes can be added easily by following the 
existing template. The only restriction is that any new discretization scheme
for the hyperbolic terms needs to be conservative (i.e., only the function to
interpolate interface fluxes needs to be specified).

PETSc TIME INTEGRATION:-
This code can be compiled with PETSc's time-integration library to use a large
number of RK and ARK implicit-explicit schemes. Before starting, it will be 
useful to briefly go through the documentation, user manuals and examples for 
PETSc's time-integration (TS) module:
+ http://www.mcs.anl.gov/petsc/petsc-current/docs/manual.pdf (Chapter 6)
+ http://www.mcs.anl.gov/petsc/petsc-current/docs/manualpages/TS/index.html

-------------------------------------------------------------------------------------

PETSc INSTALLATION:-

The code uses some PETSc features that are *NOT* available yet in the official release. 
The appropriate copy of PETSc can be obtained from the following source:
  git@bitbucket.org:emconsta/petsc-emil.git (with SSH keys and a Bitbucket account)
  https://dog5011@bitbucket.org/emconsta/petsc-emil.git (otherwise)
The branch "emil/ts-main" should be compiled using the same instructions as provided
in the official PETSc documentation. 

-------------------------------------------------------------------------------------

COMPILING:-

If obtained by cloning the GIT/SVN repository, run these commands:-
> autoreconf -i

This will generate the required files for:
> [CFLAGS="..."] ./configure [--with-mpidir=/path/to/mpi] [--prefix=/install/dir]
> make
> make install

If unpacked from tarball, then proceed with ./configure, make and
make install.

** A serial version can be compiled using the "-Dserial" compile flag.
** If MPI is unavailable or the configure script is unable to detect MPI, then a 
   serial version of the code will get compiled.

COMPILING WITH PETSc:
- install PETSc (http://www.mcs.anl.gov/petsc/)
- define the variables PETSC_DIR=/path/to/petsc and PETSC_ARCH (architecture/build)
- compile with the usual steps (the configure script will automatically detect these
  variables and decide whether to compile with PETSc interface).

** It is preferable to use the same MPI compiler for building PETSc and this code.
** If the variables PETSC_DIR and PETSC_ARCH are not defined in the environment,
   the code will get compiled without PETSc time-integration.

-------------------------------------------------------------------------------------

RUNNING:-

> [/path/to/mpi/bin/]mpiexec -n $NPROC /path/to/HyPar_binary

Note: $NPROC needs to be equal to the product of the "iproc" entries in the input
      file "solver.inp".

See section "INPUT FILES" for a list of required input files and their explanations.

RUNNING WITH PETSc TIME INTEGRATION:-
- To run with PETSc time-integration, use the flag "-use-petscts"
  Example: [$MPIEXEC -n $NPROC] /path/to/IBCARTINS3D -use-petscts
- In addition to the regular inputs, PETSc inputs can be provided through
  command line arguments or in a file ".petscrc". See PETSc documentation
  or use the "-help" argument to get a list of available arguments.
  > [$MPIEXEC -n $NPROC] /path/to/IBCARTINS3D -use-petscts -help

Time integration inputs:-
- When running with PETSc, the inputs "time_scheme" and "time_scheme_type" in 
  solver.inp (see section INPUT FILES below) are redundant. Use -ts_type to specify 
  PETSc time integration scheme.
- "dt", "n_iter" (time step size and number of time steps) may be specified
  in solver.inp but may also be specified through PETSc command line inputs
  -ts_dt, -ts_max_steps. The final time may also be specified through 
  -ts_final_time

Screen output:-
- The inputs "screen_op_iter" and "print_ls" are redundant. Instead use
  -ts_monitor, -snes_monitor, -ksp_monitor, etc to print what you need.
  See PETSc documentation for more details.

Currently, the solver uses explicit and implicit-explicit (IMEX) time-integration
schemes in PETSc. In the latter case, the user can specify for each term (hyperbolic,
parabolic, and source) whether it should be treated implicitly or explicitly through
the flags:
-{term}_{type}
where {term} can be hyperbolic, parabolic or source
and   {type} can be implicit or explicit

**Alternatively, these flags may be placed in a file ".petscrc" (See section INPUT
FILES below).

-------------------------------------------------------------------------------------

EXAMPLES:-

The folder $(top_srcdir)/Examples contains several examples with all the input files
required to run a case. In addition, to run with PETSc time-integration, see the 
sections RUNNING WITH PETSc and INPUT FILES on what additional inputs are required.

-------------------------------------------------------------------------------------

INPUT FILES:-

** In addition to the regular inputs described below, all the flags for PETSc time-integra-
tion can be placed in a file ".petscrc". The flag "-use-petscts" *must* be present to use
PETSc time-integration. The folder Examples contains a sample ".petscrc".

In general, the following input files are needed by the solver (See also sample input
files in the Examples for a better idea):

- solver.inp - Solver inputs

  Format:
    begin
      <keyword>   <value> [<value> ... <value>]
      <keyword>   <value> [<value> ... <value>]
      ...
      <keyword>   <value> [<value> ... <value>]
    end

  Keywords:
    ndims               -> number of dimensions
    nvars               -> number of variables per grid point
    size                -> number of grid points in each dimension
    iproc               -> number of processes in each dimension (for MPI runs)
    ghost               -> number of ghost points to use
    n_iter              -> number of time iterations
    time_scheme         -> time-integration scheme ("euler", "rk")
                           (see include/timeintegration.h for a complete list)
    time_scheme_type    -> specific time-integration scheme in case of "rk" 
                           ("1fe","22","33","44","ssprk3")
                           (see include/timeintegration.h for a complete list)
    hyp_space_scheme    -> spatial discretization scheme for hyperbolic terms
                           (see include/interpolation.h for a complete list)
    par_space_type      -> type of discretization for parabolic terms
                           ("conservative-1stage", "nonconservative-1stage")
                           (see include/hypar.h for a complete list)
    par_space_scheme    -> spatial discretization scheme for parabolic terms
                           (see include/interpolation.h for a complete list 
                            for conservative discretization)
                           (see include/secondderivative.h for a complete list 
                            for non-conservative discretization)
    dt                  -> time step size
    screen_op_iter      -> frequency of screen output
    file_op_iter        -> frequency of file output
    write_residual      -> write residual information to file ? (1/0)
    op_file_format      -> format of output file
                           ("text", "tecplot2d", "tecplot3d")
    op_overwrite        -> Overwrite output file ? ("yes"/"no")
    model               -> Physical model to use
                           ("linear-advection-diffusion-reaction", 
                            "fp-double-well",etc)
                           (see Examples to see currently supported 
                            physical models)
    

- boundary.inp - Boundary inputs

  Format
    <nb>
    <bctype>  <dim> <var> <face> <x1min>  <x1max> [<x2min>  <x2max> ... <x{ndim-1}min>  <x{ndims-1}max>]
    <bctype>  <dim> <var> <face> <x1min>  <x1max> [<x2min>  <x2max> ... <x{ndim-1}min>  <x{ndims-1}max>]
    ...
    <bctype>  <dim> <var> <face> <x1min>  <x1max> [<x2min>  <x2max> ... <x{ndim-1}min>  <x{ndims-1}max>]

  Explanation:
    nb  -> number of boundary conditions
    Followed by nb lines, 1 for each boundary condition, of the format as 
    shown above

    bctype      -> type of boundary condition 
                   ("periodic", "extrapolate", "dirichlet", etc)
                   (see include/boundaryconditions.h for a complete list)
    dim         -> dimension along which to apply this boundary conditions 
                   (0 <= dim < ndims)
    var         -> variable on which to apply this boundary conditions 
                   (0 <= var < nvars)
    face        -> face on which to apply this boundary condition 
                   (1 -> left/xmin; -1 -> right/xmax)

    xNmin, xNmax -> extent of this boundary condition along dimension N
                    note: the values for N=dim are ignored.
                    This needs to be specified for all the dimensions 
                    0 <= N < ndims

- initial.inp
  
  The initial solution - The cases in Examples contain codes "init.C" to 
                         generate this input file in the correct format. 
                         They can be modified to generate different initial 
                         conditions (or use different codes as long as it 
                         outputs the initial conditions in the same format 
                         as "init.C")

- exact.inp (**Optional**)

  The exact solution, if available - used to calculate the numerical errors. 
  The format of this file is same  as that of "initial.inp"

- physics.inp
  
  Format
    <begin>
      <keyword>     <value>
      <keyword>     <value>
      ...
      <keyword>     <value>
    <end>

  Physics-specific parameters (eg. advection speed, diffusion coefficient, 
  etc). Keywords are specific to the physical model, so consult an example 
  of a specific physical model to see the required parameters for that model.

-------------------------------------------------------------------------------------
